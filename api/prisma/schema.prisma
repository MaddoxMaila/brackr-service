datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// all models
model Company {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  email      String     @unique @db.VarChar(155)
  createdAt  DateTime   @default(now())

  // Foreign Key Reference
  // Each Company has users, buses, journeys
  users       User[]
  vehicles    Vehicle[]
  journeys    Journey[]
  apikey      Apikey[]  

  @@map("company")
}

model Apikey {
  id          Int         @id @default(autoincrement())
  apiKey      String      @unique @db.VarChar()
  createdAt   DateTime    @default(now())
  expire      DateTime

  // Foreign Key Reference
  // Each User belongs to a company
  companyId  Int?
  company    Company? @relation(fields: [companyId], references: [id])

  @@map("apikey")
}


model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  type       String   @db.VarChar(10)
  email      String   @unique @db.VarChar(155)
  password   String
  createdAt  DateTime @default(now())

  // Foreign Key Reference
  // Each User belongs to a company
  companyId  Int?
  company    Company? @relation(fields: [companyId], references: [id])

  @@map("user")
}

model Vehicle {
  id              Int      @id @default(autoincrement())
  vehicleNumber   String   @db.VarChar(20)
  transit         Transit  @default(NO)
  createdAt       DateTime @default(now())

  // Foreign Key Reference
  // Each Bus has many positions (as it moves)
  positions  Position[]

  // Foreign Key Reference
  // Each Bus belongs to a company
  companyId  Int?
  company    Company? @relation(fields: [companyId], references: [id])

  @@map("vehicle")
}

model Journey {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)

  // Foreign Key Reference
  // Each Bus belongs to a company
  companyId  Int?
  company    Company? @relation(fields: [companyId], references: [id])

  @@map("journey")  
}

model Position {
  id          Int       @id @default(autoincrement())
  from        String    @db.VarChar(100)
  to          String    @db.VarChar(100)
  latitude    Decimal
  longitude   Decimal
  createdAt   DateTime @default(now())

  // Foreign Key Reference
  // Each Position belongs to one vehicle
  vehicleId   Int?
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])

  @@map("position")  
}

enum Transit {
  NO
  YES
}


