datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// all models
model Company {
  id         String     @id @default(uuid())
  name       String     @db.VarChar(100)
  email      String     @unique @db.VarChar(155)
  createdAt  DateTime   @default(now())

  // Foreign Key Reference
  // Each Company has users, buses, journeys
  users             User[]
  trackedObject     TrackedObject[]
  journeys          Journey[]
  locations         Location[]
  apikey            Apikey[]
  positions         Position[]

  @@map("company")
}

model Apikey {
  id          String      @id @default(uuid())
  apiKey      String      @unique @default(uuid())
  createdAt   DateTime    @default(now())
  expire      DateTime

  // Foreign Key Reference
  // Each User belongs to a company
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])

  @@map("apikey")
}


model User {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(100)
  type       String   @db.VarChar(10)
  email      String   @unique @db.VarChar(155)
  password   String
  createdAt  DateTime @default(now())

  journeys   Journey[]

  // Foreign Key Reference
  // Each User belongs to a company
  companyId  String?
  company    Company? @relation(fields: [companyId], references: [id])

  @@map("user")
}

model TrackedObject {
  id              String    @id @default(uuid())
  name            String    @unique @db.VarChar(20)
  createdAt       DateTime  @default(now())

  // Foreign Key Reference
  // Each Bus has many positions (as it moves)
  positions       Position[]
  journey         Journey[]

  // Foreign Key Reference
  // Each Bus belongs to a company

  companyId       String?
  company         Company? @relation(fields: [companyId], references: [id])

  @@map("trackedObject")
}

model Location {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(100)
  createdAt   DateTime  @default(now())

  latitude    String    @db.VarChar(100) @default("0.0")
  longitude   String    @db.VarChar(100) @default("0.0")


  companyId   String?
  company     Company?  @relation(fields: [companyId], references: [id])

  @@map("location")
}

model Journey {
  id              String    @id @default(uuid())
  from            String    @db.VarChar(100)
  to              String    @db.VarChar(100)
  transit         Int
  createdAt       DateTime  @default(now())


  positions       Position[]
  // Foreign Key Reference
  // Each Bus belongs to a company
  userId          String?
  user            User? @relation(fields: [userId], references: [id])


  companyId       String?
  company         Company? @relation(fields: [companyId], references: [id])

  trackedObjectId String?
  trackedObject   TrackedObject? @relation(fields: [trackedObjectId], references: [id])

  @@map("journey")  
}

model Position {
  id              String    @id @default(uuid())
  latitude        Decimal
  longitude       Decimal
  createdAt       DateTime  @default(now())

  // Foreign Key Reference
  // Each Position belongs to one vehicle
  trackedObjectId String?
  trackedObject   TrackedObject? @relation(fields: [trackedObjectId], references: [id])

  companyId       String?
  company         Company? @relation(fields: [companyId], references: [id])

  journeyId       String?
  journey         Journey? @relation(fields: [journeyId], references: [id])

  @@map("position")  
}

enum Transit {
  NO
  YES
}


